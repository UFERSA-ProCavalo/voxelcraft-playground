# .github/workflows/pr-labels.yml
name: Sincronizar Labels de PR

on:
  push:
    branches:
      - 'core/feat/*'
      - 'libs/*'
      - 'packages/*'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sync-labels:
    name: Sincronizar Labels de PR
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Ler labels permitidos
        id: labels
        run: |
          LABELS=$(jq -r '.[].name' .github/labels.json | tr '\n' ',')
          echo "labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Obter mensagens de commit
        id: commits
        run: |
          # Para push: pega commits desde o merge-base com develop
          if [[ "${{ github.event_name }}" == "push" ]]; then
            git fetch origin develop
            MERGE_BASE=$(git merge-base HEAD origin/develop)
            MESSAGES=$(git log --pretty=format:'%s' $MERGE_BASE..HEAD | tr '\n' ' ')
            echo "messages=$MESSAGES" >> $GITHUB_OUTPUT
          else
            # Para PR: pega todos commits do PR
            PR_NUMBER=${{ github.event.pull_request.number }}
            MESSAGES=$(gh pr view $PR_NUMBER --json commits | jq -r '.commits[].commit.message' | tr '\n' ' ')
            echo "messages=$MESSAGES" >> $GITHUB_OUTPUT
          fi

      - name: Detectar labels dos commits
        id: detect
        run: |
          LABELS="${{ steps.labels.outputs.labels }}"
          MESSAGES="${{ steps.commits.outputs.messages }}"
          MATCHED_LABELS=""
          for label in $(echo $LABELS | tr ',' ' '); do
            if echo "$MESSAGES" | grep -iq "\b$label\b"; then
              MATCHED_LABELS="$MATCHED_LABELS $label"
            fi
          done
          MATCHED_LABELS=$(echo $MATCHED_LABELS | xargs)
          echo "matched_labels=$MATCHED_LABELS" >> $GITHUB_OUTPUT

      - name: Encontrar PR para branch
        id: pr
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          ORG="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          PR_NUMBER=""
          # Para push, busca PR aberto para branch
          if [[ "${{ github.event_name }}" == "push" ]]; then
            PR_NUMBER=$(gh pr list --state open --base develop --head "$BRANCH" --json number --jq '.[0].number')
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi
          if [[ -z "$PR_NUMBER" ]]; then
            echo "Nenhum PR aberto encontrado para a branch '$BRANCH'. Saindo." && exit 0
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Sincronizar labels no PR
        if: steps.pr.outputs.pr_number != ''
        run: |
          PR_NUMBER="${{ steps.pr.outputs.pr_number }}"
          LABELS="${{ steps.detect.outputs.matched_labels }}"
          if [[ -z "$LABELS" ]]; then
            echo "Nenhum label detectado nos commits. Nenhuma alteração feita."
            exit 0
          fi
          # Remove todos os labels permitidos que não estão presentes
          EXISTING_LABELS=$(gh pr view $PR_NUMBER --json labels | jq -r '.labels[].name')
          for label in $EXISTING_LABELS; do
            if echo "${{ steps.labels.outputs.labels }}" | grep -q "$label"; then
              if ! echo "$LABELS" | grep -q "$label"; then
                gh pr edit $PR_NUMBER --remove-label "$label"
                echo "Label removido: $label"
              fi
            fi
          done
          # Adiciona labels detectados
          for label in $LABELS; do
            gh pr edit $PR_NUMBER --add-label "$label"
            echo "Label adicionado: $label"
          done
          echo "Labels sincronizados para PR #$PR_NUMBER: $LABELS"

      - name: Log final
        run: echo "Sincronização de labels concluída para PR #${{ steps.pr.outputs.pr_number }}."
