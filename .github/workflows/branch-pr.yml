# .github/workflows/branch-pr.yml
name: Manage Feature/Lib/Package PRs

on:
  push:
    branches:
      - 'core/feat/*'
      - 'libs/*'
      - 'packages/*'

jobs:
  manage-pr:
    name: Create or Update Draft PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Fetch develop branch
        run: git fetch origin develop

      - name: Find merge base with develop
        id: merge_base
        run: |
          MERGE_BASE=$(git merge-base HEAD origin/develop)
          echo "merge_base=$MERGE_BASE" >> $GITHUB_OUTPUT

      - name: Collect new commits since merge base
        id: commits
        run: |
          COMMITS=$(git log --pretty=format:'{"sha":"%H", "message":"%s"}' ${{ steps.merge_base.outputs.merge_base }}..HEAD | jq -s .)
          echo "commits_json<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          # Also collect all commit messages for #DONE detection
          MESSAGES=$(git log --pretty=format:'%s' ${{ steps.merge_base.outputs.merge_base }}..HEAD | tr '\n' ' ')
          echo "messages_content=$MESSAGES" >> $GITHUB_OUTPUT

      - name: Create or Update Draft PR
        uses: actions/github-script@v7
        env:
          COMMITS_JSON: ${{ steps.commits.outputs.commits_json }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const base = 'develop';
            const org = context.repo.owner;
            const repo = context.repo.repo;
            const commitsJsonString = process.env.COMMITS_JSON;
            let parsedCommits = [];
            try {
              if (commitsJsonString && commitsJsonString.trim() !== "") {
                parsedCommits = JSON.parse(commitsJsonString);
              }
            } catch (e) {
              console.error('Failed to parse commits JSON:', e);
            }
            const commitMessages = parsedCommits.map(c => c.message);
            // Prepare PR body
            const now = new Date().toISOString().replace('T', ' ').replace(/\..+/, '') + ' UTC';
            const commitsText = parsedCommits.length > 0
              ? parsedCommits.map(c => {
                  const shortSha = c.sha.slice(0, 7);
                  return `- [${c.message.split('\n')[0]}](https://github.com/${org}/${repo}/commit/${c.sha}) (${shortSha})`;
                }).join('\n')
              : '_Nenhum commit novo nesta atualização._';
            const body = `🤖 PR de rascunho automático para a branch [\`${branch}\`](https://github.com/${org}/${repo}/tree/${branch})\n\n### 🔍 Commits recentes\n${commitsText}\n\n### 🔗 Links úteis\n- 🔁 [Comparar mudanças](https://github.com/${org}/${repo}/compare/${base}...${branch})\n- 📄 [Ver branch \`${branch}\`](https://github.com/${org}/${repo}/tree/${branch})\n\n_Última atualização automática: ${now}_\n---\n_Use este PR para revisões iniciais e testes._`;
            // Check for existing open PRs for this branch
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: org,
              repo: repo,
              head: `${org}:${branch}`,
              base: base,
              state: 'open'
            });
            const featureLabel = branch.replace(/^.*\//, ''); // e.g. 'playgrund' from 'core/feat/playgrund'
            const labelsToAdd = ['wip', featureLabel];
            let prNumber;
            if (existingPRs.length === 0) {
              // Create new draft PR
              const { data: newPR } = await github.rest.pulls.create({
                owner: org,
                repo: repo,
                head: branch,
                base: base,
                title: `🚧 PR de Rascunho: ${branch} → ${base}`,
                body: body,
                draft: true
              });
              prNumber = newPR.number;
              // Add labels
              await github.rest.issues.addLabels({
                owner: org,
                repo: repo,
                issue_number: prNumber,
                labels: labelsToAdd
              });
              console.log(`Created new draft PR #${prNumber} with labels: ${labelsToAdd.join(', ')}`);
            } else {
              // Update existing PR
              const pr = existingPRs[0];
              prNumber = pr.number;
              await github.rest.pulls.update({
                owner: org,
                repo: repo,
                pull_number: prNumber,
                body: body
              });
              // Ensure labels
              const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
                owner: org,
                repo: repo,
                issue_number: prNumber
              });
              const currentLabelNames = currentLabels.map(l => l.name);
              const missingLabels = labelsToAdd.filter(l => !currentLabelNames.includes(l));
              if (missingLabels.length > 0) {
                await github.rest.issues.addLabels({
                  owner: org,
                  repo: repo,
                  issue_number: prNumber,
                  labels: missingLabels
                });
              }
              console.log(`Updated draft PR #${prNumber} and ensured labels.`);
            }
            // Output PR number for next step
            core.setOutput('pr_number', prNumber);

      - name: Mark PR as Ready if #DONE
        if: contains(steps.commits.outputs.messages_content, '#DONE')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const org = context.repo.owner;
            const repo = context.repo.repo;
            // Find open PR for this branch
            const { data: prs } = await github.rest.pulls.list({
              owner: org,
              repo: repo,
              head: `${org}:${branch}`,
              base: 'develop',
              state: 'open'
            });
            if (prs.length === 0) {
              console.log(`No open PR found for branch '${branch}'.`);
              return;
            }
            const pr = prs[0];
            // Mark as ready for review if draft
            if (pr.draft) {
              const mutation = `
                mutation MarkPullRequestReadyForReview($pullRequestId: ID!) {
                  markPullRequestReadyForReview(input: {pullRequestId: $pullRequestId}) {
                    pullRequest {
                      id
                      isDraft
                      number
                    }
                  }
                }`;
              const variables = { pullRequestId: pr.node_id };
              const result = await github.graphql(mutation, variables);
              console.log(`PR #${pr.number} marked as ready for review.`);
            } else {
              console.log(`PR #${pr.number} is already ready for review.`);
            }
            // Remove 'wip' label and add 'ready'
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner: org,
              repo: repo,
              issue_number: pr.number
            });
            const currentLabelNames = currentLabels.map(l => l.name);
            if (currentLabelNames.includes('wip')) {
              await github.rest.issues.removeLabel({
                owner: org,
                repo: repo,
                issue_number: pr.number,
                name: 'wip'
              });
              console.log(`Removed 'wip' label from PR #${pr.number}.`);
            }
            if (!currentLabelNames.includes('ready')) {
              await github.rest.issues.addLabels({
                owner: org,
                repo: repo,
                issue_number: pr.number,
                labels: ['ready']
              });
              console.log(`Added 'ready' label to PR #${pr.number}.`);
            }
